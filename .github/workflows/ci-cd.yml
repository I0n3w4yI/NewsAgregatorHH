name: CI/CD

on:
	push:
		branches:
			- main
	pull_request:

env:
	PYTHON_VERSION: "3.11"
	NODE_VERSION: "20"

jobs:
	quality:
		name: Lint & Build
		runs-on: ubuntu-latest
		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Set up Python
				uses: actions/setup-python@v5
				with:
					python-version: ${{ env.PYTHON_VERSION }}

			- name: Install backend dependencies
				working-directory: mikroservis1337
				run: |
					python -m pip install --upgrade pip
					pip install --no-cache-dir -r requirements.txt

			- name: Backend syntax check
				working-directory: mikroservis1337
				run: python -m compileall .

			- name: Set up Node.js
				uses: actions/setup-node@v4
				with:
					node-version: ${{ env.NODE_VERSION }}
					cache: npm
					cache-dependency-path: frontend/package-lock.json

			- name: Install frontend dependencies
				working-directory: frontend
				run: npm install

			- name: Build frontend
				working-directory: frontend
				run: npm run build

			- name: Upload frontend build artifact
				if: github.event_name == 'pull_request'
				uses: actions/upload-artifact@v4
				with:
					name: frontend-dist
					path: frontend/dist

	docker:
		name: Build & Push Images
		needs: quality
		runs-on: ubuntu-latest
		permissions:
			contents: read
			packages: write
		steps:
			- name: Checkout repository
				uses: actions/checkout@v4

			- name: Set up Docker Buildx
				uses: docker/setup-buildx-action@v3

			- name: Prepare image names
				id: vars
				run: |
					owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
					echo "backend_image=ghcr.io/${owner}/newsagregatorhh-backend" >> $GITHUB_OUTPUT
					echo "frontend_image=ghcr.io/${owner}/newsagregatorhh-frontend" >> $GITHUB_OUTPUT

			- name: Log in to GHCR
				uses: docker/login-action@v3
				with:
					registry: ghcr.io
					username: ${{ github.actor }}
					password: ${{ secrets.GITHUB_TOKEN }}

			- name: Build backend image
				run: |
					docker build -f Dockerfile.backend -t ${{ steps.vars.outputs.backend_image }}:${{ github.sha }} .

			- name: Build frontend image
				run: |
					docker build -f Dockerfile.frontend -t ${{ steps.vars.outputs.frontend_image }}:${{ github.sha }} .

			- name: Push images (SHA tag)
				if: github.ref == 'refs/heads/main'
				run: |
					docker push ${{ steps.vars.outputs.backend_image }}:${{ github.sha }}
					docker push ${{ steps.vars.outputs.frontend_image }}:${{ github.sha }}

			- name: Tag & push latest
				if: github.ref == 'refs/heads/main'
				run: |
					docker tag ${{ steps.vars.outputs.backend_image }}:${{ github.sha }} ${{ steps.vars.outputs.backend_image }}:latest
					docker tag ${{ steps.vars.outputs.frontend_image }}:${{ github.sha }} ${{ steps.vars.outputs.frontend_image }}:latest
					docker push ${{ steps.vars.outputs.backend_image }}:latest
					docker push ${{ steps.vars.outputs.frontend_image }}:latest

