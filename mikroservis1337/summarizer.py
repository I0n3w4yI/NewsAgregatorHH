import os
import requests
from typing import Dict, Any, List
import logging
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class NewsSummarizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ LLM API"""
    
    def __init__(self, api_config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            api_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏–∑ config.yaml
        """
        self.provider = 'openrouter'
        self.config = api_config.get('openrouter', {})
        self.api_key = os.getenv('OPENROUTER_API_KEY')
        if not self.api_key:
            logger.warning("API –∫–ª—é—á –¥–ª—è Openrouter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def summarize_news(self, news_item: Dict[str, Any]) -> str:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        
        Args:
            news_item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –ö—Ä–∞—Ç–∫–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        """
        title = news_item.get('title', '')
        description = news_item.get('description', '')
        
        prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ù–û–í–û–°–¢–¨:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}

–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
{description}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:
1. –û—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?)
2. –ö–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ñ–∞–∫—Ç—ã
3. –ö—Ç–æ –≤–æ–≤–ª–µ—á–µ–Ω (–ª—é–¥–∏, –∫–æ–º–ø–∞–Ω–∏–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
4. –ö–æ–≥–¥–∞ –∏ –≥–¥–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
5. –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏–ª–∏ –∫–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è

–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Ç–æ—á–Ω—ã–º –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–†–ï–ó–Æ–ú–ï:"""
        
        try:
            return self._summarize_openrouter(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            # Fallback - —Å–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
            summary = f"{title}. "
            if description:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
                summary += description[:500]
                if len(description) > 500:
                    summary += "..."
            return summary
    
    def _summarize_openrouter(self, prompt: str) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter API"""
        url = f"{self.config.get('base_url')}/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": self.config.get('model'),
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": self.config.get('temperature', 0.7),
            "max_tokens": self.config.get('max_tokens', 500)
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        summary = result['choices'][0]['message']['content'].strip()
        return summary
    

    
    def summarize_all_news(self, news_list: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º 'summary'
        """
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        summarized_news = []
        for i, news in enumerate(news_list, 1):
            logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {i}/{len(news_list)}: {news.get('title', '')[:50]}...")
            summary = self.summarize_news(news)
            news_copy = news.copy()
            news_copy['summary'] = summary
            summarized_news.append(news_copy)
        
        logger.info("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return summarized_news
    
    def select_top_news(self, news_list: List[Dict[str, Any]], top_count: int = 5) -> List[Dict[str, Any]]:
        """
        –í—ã–±–æ—Ä —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è —Å –ø–æ–º–æ—â—å—é LLM
        
        Args:
            news_list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
            top_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π
        """
        logger.info(f"–í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-{top_count} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(news_list)}...")
        
        news_summaries = []
        for i, news in enumerate(news_list):
            news_summaries.append(
                f"{i+1}. [{news.get('category', '–æ–±—â–µ–µ').upper()}] {news.get('title', '')}\n"
                f"   üìù {news.get('summary', '')}\n"
                f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {news.get('source', '')}\n\n"
            )
        
        prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤—ã–±–µ—Ä–∏ {top_count} –°–ê–ú–´–• –ò–ù–¢–ï–†–ï–°–ù–´–• –∏ –ó–ù–ê–ß–ò–ú–´–• –Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è.

–ö–†–ò–¢–ï–†–ò–ò –í–´–ë–û–†–ê:
1. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–≤–µ–∂–µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
2. –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ª—é–¥–µ–π
3. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–æ–≤–∏–∑–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –ò–Ω—Ç–µ—Ä–µ—Å –¥–ª—è —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
5. –ü–æ–ª–Ω–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

–ù–û–í–û–°–¢–ò:
{''.join(news_summaries)}

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ {top_count} –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û –∏—Ö –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 5, 12, 18, 23

–û–¢–í–ï–¢ (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞):"""
        
        try:
            response = self._summarize_openrouter(prompt)
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            selected_indices = []
            for part in response.replace(' ', '').split(','):
                try:
                    idx = int(part.strip()) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if 0 <= idx < len(news_list):
                        selected_indices.append(idx)
                except ValueError:
                    continue
            # –ï—Å–ª–∏ LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ top_count –Ω–æ–≤–æ—Å—Ç–µ–π
            if len(selected_indices) < top_count:
                logger.warning("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
                selected_indices = list(range(min(top_count, len(news_list))))
            selected_indices = selected_indices[:top_count]
            top_news = [news_list[i] for i in selected_indices]
            logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(top_news)} —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π")
            return top_news
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return news_list[:top_count]
