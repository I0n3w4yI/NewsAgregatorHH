"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
"""
import yaml
import json
from pathlib import Path
import logging
from typing import Dict, Any
from rss_parser import RSSParser
from summarizer import NewsSummarizer

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class NewsAggregator:
    def __init__(self, config_path: str = 'config.yaml'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = self._load_config(config_path)
        self.parser = RSSParser(
            max_news_per_source=self.config['news']['max_news_per_source']
        )
        self.summarizer = NewsSummarizer(self.config['api'])
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {config_path}")
        
        config_file = Path(config_path)
        if not config_file.exists():
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return config
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        logger.info("=" * 80)
        logger.info("TU TU RU RU max verstappen TU TU RU RU")
        logger.info("=" * 80)
        
        # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info("\n[–®–ê–ì 1] –ü–∞—Ä—Å–∏–Ω–≥ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        news_by_category = self.parser.parse_all_sources(
            self.config['rss_sources']
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        all_news = self.parser.get_all_news_flat(news_by_category)
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_news)}")
        
        if not all_news:
            logger.warning("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        # –®–∞–≥ 2: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        logger.info("\n[–®–ê–ì 2] –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π...")
        summarized_news = self.summarizer.summarize_all_news(all_news)
        
        # –®–∞–≥ 3: –í—ã–±–æ—Ä —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è
        logger.info("\n[–®–ê–ì 3] –í—ã–±–æ—Ä —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è...")
        top_news = self.summarizer.select_top_news(
            summarized_news,
            top_count=self.config['news']['top_news_count']
        )
        
        # –®–∞–≥ 4: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n[–®–ê–ì 4] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        self._print_results(news_by_category, summarized_news, top_news)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
        self._save_results(news_by_category, summarized_news, top_news)
        
        logger.info("\n" + "=" * 80)
        logger.info("–†–ê–ë–û–¢–ê –ê–ì–†–ï–ì–ê–¢–û–†–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 80)
    
    def _print_results(self, news_by_category, summarized_news, top_news):
        """
        –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        
        Args:
            news_by_category: –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            summarized_news: –í—Å–µ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            top_news: –¢–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è
        """
        print("\n" + "=" * 80)
        print("–û–¢–ß–ï–¢ –û –ù–û–í–û–°–¢–Ø–•")
        print("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, news_list in news_by_category.items():
            print(f"  ‚Ä¢ {category.capitalize()}: {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –¢–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è
        print("\n" + "üî•" * 40)
        print(f"–¢–û–ü-{len(top_news)} –ù–û–í–û–°–¢–ï–ô –î–ù–Ø")
        print("üî•" * 40)
        
        for i, news in enumerate(top_news, 1):
            print(f"\n{i}. [{news.get('category', '–æ–±—â–µ–µ').upper()}] {news.get('title', '')}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news.get('source', '')}")
            print(f"   –î–∞—Ç–∞: {news.get('published', '')}")
            print(f"   –°—Å—ã–ª–∫–∞: {news.get('link', '')}")
            print(f"   üìù –†–µ–∑—é–º–µ: {news.get('summary', '')}")
        
        # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\n" + "=" * 80)
        print("–í–°–ï –ù–û–í–û–°–¢–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        print("=" * 80)
        
        for category, news_list in news_by_category.items():
            print(f"\nüìÅ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category.upper()}")
            print("-" * 80)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_summarized = [
                n for n in summarized_news 
                if n.get('category') == category
            ]
            
            for i, news in enumerate(category_summarized, 1):
                print(f"\n{i}. {news.get('title', '')}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news.get('source', '')}")
                print(f"   –î–∞—Ç–∞: {news.get('published', '')}")
                print(f"   –°—Å—ã–ª–∫–∞: {news.get('link', '')}")
                print(f"   üìù –†–µ–∑—é–º–µ: {news.get('summary', '')}")
    
    def _save_results(self, news_by_category, summarized_news, top_news):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª—ã
        
        Args:
            news_by_category: –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            summarized_news: –í—Å–µ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            top_news: –¢–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è
        """
        output_dir = Path('output')
        output_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
        with open(output_dir / 'all_news.json', 'w', encoding='utf-8') as f:
            json.dump(summarized_news, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏
        with open(output_dir / 'top_news.json', 'w', encoding='utf-8') as f:
            json.dump(top_news, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        with open(output_dir / 'news_by_category.json', 'w', encoding='utf-8') as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            categorized_summarized = {}
            for category, news_list in news_by_category.items():
                categorized_summarized[category] = [
                    n for n in summarized_news 
                    if n.get('category') == category
                ]
            json.dump(categorized_summarized, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {output_dir}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        aggregator = NewsAggregator(config_path='config.yaml')
        aggregator.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise


if __name__ == '__main__':
    main()
